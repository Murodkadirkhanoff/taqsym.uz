services:
  postgres:
      image: postgres:latest
      container_name: postgres
      environment:
        POSTGRES_DB: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
      ports:
        - '5433:5432'
      volumes:
        - postgres_data:/var/lib/postgresql/data
      networks:
      - users-network
  task-db:
      image: postgres:latest
      container_name: task-db
      environment:
        POSTGRES_DB: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
      ports:
        - '5434:5432'
      volumes:
        - task_db_data:/var/lib/postgresql/data
      networks:
      - users-network
  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - users-network
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - users-network
  redis:
    image: redis:latest
    ports:
      - '6379:6379'
    networks:
      - users-network
  minio:
    image: minio/minio
    command: server /data
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    ports:
      - '9000:9000'
    volumes:
      - minio_data:/data
    networks:
      - users-network
  elasticsearch:
    image: elasticsearch:8.12.0
    environment:
      discovery.type: single-node
    ports:
      - '9200:9200'
    networks:
      - users-network
  user-service:
    build:
      context: .
      dockerfile: user-service/cmd/Dockerfile
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - users-network
    ports:
      - "50051:50051"
  task-service:
    build:
      context: .
      dockerfile: task-service/cmd/Dockerfile
    depends_on:
      - task-db
      - rabbitmq
    networks:
      - users-network
    ports:
      - "50052:50051"
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/cmd/Dockerfile
    depends_on:
      - postgres
      - rabbitmq
    ports:
      - "${USER_SERVICE_APP_PORT}:${USER_SERVICE_APP_PORT}"
    networks:
      - users-network
  migrate:
    image: migrate/migrate
    depends_on:
      - postgres
    volumes:
      - ./user-service/migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "postgres://postgres:password@postgres:5432/postgres?sslmode=disable",
      "up"
    ]
    restart: on-failure
    networks:
      - users-network

  task-migrate:
    image: migrate/migrate
    depends_on:
      - task-db
    volumes:
      - ./task-service/migrations:/migrations
    command: [
      "-path", "/migrations",
      "-database", "postgres://postgres:password@task-db:5432/postgres?sslmode=disable",
      "up"
    ]
    restart: on-failure
    networks:
      - users-network
volumes:
  postgres_data:
  task_db_data:
  minio_data:

networks:
  users-network: